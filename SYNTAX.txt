# single line comment

###
HEREDOC
###

# borrows are tracked by frees
# frees are infered as early as possible
discard : (a: a) -> ~a (b: b) -> b
discard = \a -> b ->
  b

always (a: a) (b: b) -> a =
  a

# unions and aliases share the same `type` keyword, but unions have | prefixes
type Maybe x =
  | Some x
  | None

# opaque types can be declared with a single |
type Id =
  | Id String

# some functions only work with line  ar types
setJust
  (b: b)
  (*m: Maybe a)
-> *Maybe b =
  # set is like case except it allows changing the values
  # the returned type must be a tag to make set work
  set m in
    | Some _:
      # if a is *a, a free for a should be inserted here
      Some b

    | None:
      # this free must be infered
      free m in Some b

# both forms of specifying function types as aliases exist
type Always a b = a -> b -> a

# the second form is useful for enforcing frees
type AlwaysNamed a b = a: a -> b: b -> free b in a
